(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{850:function(e,t,r){"use strict";r.r(t);var s=r(44),v=Object(s.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("p",[e._v("Vue 组件间通信是面试常考的知识点之一，这题有点类似于开放题，你回答出越多方法当然越加分，表明你对 Vue 掌握的越熟练。")]),e._v(" "),r("p",[e._v("Vue 组件间通信只要指以下 3 类通信："),r("strong",[e._v("父子组件通信、隔代组件通信、兄弟组件通信")])]),e._v(" "),r("p",[e._v("下面我们分别介绍每种通信方式且会说明此种方法可适用于哪类组件间通信。")]),e._v(" "),r("h2",{attrs:{id:"props-emit-适用-父子组件通信"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#props-emit-适用-父子组件通信"}},[e._v("#")]),e._v(" props / $emit 适用 父子组件通信")]),e._v(" "),r("p",[e._v("这种方法是 Vue 组件的基础，相信大部分同学耳闻能详，所以此处就不举例展开介绍。")]),e._v(" "),r("h2",{attrs:{id:"ref-与-children-适用-父子组件通信"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ref-与-children-适用-父子组件通信"}},[e._v("#")]),e._v(" ref 与 children 适用 父子组件通信")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("ref：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例")])]),e._v(" "),r("li",[r("p",[e._v("children：访问父 / 子实例")])])]),e._v(" "),r("h2",{attrs:{id:"eventbus-on-适用于-父子、隔代、兄弟组件通信"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#eventbus-on-适用于-父子、隔代、兄弟组件通信"}},[e._v("#")]),e._v(" EventBus （on） 适用于 父子、隔代、兄弟组件通信")]),e._v(" "),r("p",[e._v("这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件，从而实现任何组件间的通信，包括父子、隔代、兄弟组件。")]),e._v(" "),r("h2",{attrs:{id:"listeners-适用于-隔代组件通信"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#listeners-适用于-隔代组件通信"}},[e._v("#")]),e._v(" listeners 适用于 隔代组件通信")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("attrs: 传入内部组件。通常配合 inheritAttrs 选项一起使用。")])]),e._v(" "),r("li",[r("p",[e._v('listeners：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on="listeners" 传入内部组件')])])]),e._v(" "),r("h2",{attrs:{id:"provide-inject-适用于-隔代组件通信"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#provide-inject-适用于-隔代组件通信"}},[e._v("#")]),e._v(" provide / inject 适用于 隔代组件通信")]),e._v(" "),r("p",[e._v("祖先组件中通过 provider 来提供变量，然后在子孙组件中通过 inject 来注入变量。provide / inject API 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。")]),e._v(" "),r("h3",{attrs:{id:"vuex-适用于-父子、隔代、兄弟组件通信"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#vuex-适用于-父子、隔代、兄弟组件通信"}},[e._v("#")]),e._v(" Vuex 适用于 父子、隔代、兄弟组件通信")]),e._v(" "),r("p",[e._v("Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。")])]),e._v(" "),r("li",[r("p",[e._v("改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。")])])])])}),[],!1,null,null,null);t.default=v.exports}}]);